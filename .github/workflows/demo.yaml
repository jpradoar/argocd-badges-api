name: argocd-badges-api

on:
  push:
    branches:
      - develop
    # paths:
    #   - 'app/**'

env:
  BUILD_CONTEXT: './app'
  SLACK_CHANNEL: 'builds-and-ci'
  SLACK_MSG_COLOR: '#0092ff'
  COMMITER_NAME: 'AutoCommit'
  VULN_SEVERITY: 'CRITICAL,HIGH'
  VULN_TYPE: 'os,library'
  VULN_FORMAT: 'table'
  VULN_TIMEOUT_SCAN: '2m0s'
  VULN_SCANNERS: 'vuln,secret,misconfig,license'
  VULN_IGNORED_LIC: 'MIT'
  VULN_EXIT_CODE: 1
  TRIVY_DISABLE_VEX_NOTICE: true
  TRIVY_REPOSITORY: 'public.ecr.aws/aquasecurity/trivy-db:2'
  GH_REPO_OWNER: ${{ github.repository_owner }}
  GH_REPO_NAME: ${{ github.event.repository.name }}

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      actions: write


    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.GH_REPO_OWNER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN_FORGITHUB_ACTIONS }}

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BUILD_CONTEXT }}
          push: true
          load: true
          tags: ${{ github.repository_owner }}/${{ env.GH_REPO_NAME }}:latest

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      - name: Run Trivy vulnerability scan
        id: trivy_scan
        continue-on-error: true
        run: |
          mkdir -p ./vuln_scans
          trivy image \
            --scanners ${{ env.VULN_SCANNERS }} \
            --severity ${{ env.VULN_SEVERITY }} \
            --timeout ${{ env.VULN_TIMEOUT_SCAN }} \
            --pkg-types ${{ env.VULN_TYPE }} \
            --license-full \
            --ignored-licenses ${{ env.VULN_IGNORED_LIC }} \
            --format ${{ env.VULN_FORMAT }} \
            --exit-code ${{ env.VULN_EXIT_CODE }} \
            --db-repository ${{ env.TRIVY_REPOSITORY }} \
            --ignore-unfixed \
            -o ./vuln_scans/${{ env.GH_REPO_NAME }}_vuln_scan.table \
            ${{ github.repository_owner }}/${{ env.GH_REPO_NAME }}:latest
          EXITCODE=$?
          echo "exitcode=$EXITCODE" >> $GITHUB_OUTPUT

      - name: Show Trivy report
        run: cat ./vuln_scans/${{ env.GH_REPO_NAME }}_vuln_scan.table

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install semantic-release
        run: npm install semantic-release @semantic-release/git @semantic-release/github @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog

      - name: Run semantic-release (update CHANGELOG.md & GitHub release)
        id: semantic
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest release version
        id: get_version
        run: |
          VERSION=$(curl -s -m 10 --connect-timeout 5 \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)
          if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
            echo "No release found, setting VERSION=v0.0.1"
            VERSION="v0.0.1"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build & Push Docker images
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BUILD_CONTEXT }}
          push: true
          load: true
          tags: ${{ github.repository_owner }}/${{ env.GH_REPO_NAME }}:${{ steps.get_version.outputs.version }}


      - name: Prepare GitHub issue body
        if: steps.trivy_scan.outputs.exitcode != '0' && steps.docker_push.conclusion == 'success'
        run: |
          echo "### See detailed information in: " > /tmp/vuln_info.md
          echo "<br>![](https://custom-icon-badges.demolab.com/badge/Vulnerability-detected-red.svg) <br>" >> /tmp/vuln_info.md
          echo "* Detected in image: [${{ env.GH_REPO_NAME }}](https://hub.docker.com/repository/docker/${{ github.repository_owner }}/${{ env.GH_REPO_NAME }}/general)" >> /tmp/vuln_info.md
          echo "* Detected in commit: ${{ github.sha }}" >> /tmp/vuln_info.md
          echo "* Vulnerability report: [vuln_report](https://${{ env.GH_REPO_OWNER }}.github.io/${{ env.GH_REPO_NAME }}/vuln_scans/${{ env.GH_REPO_NAME }}_vuln_scan.html)" >> /tmp/vuln_info.md

      - name: Create GitHub issue for vulnerability
        if: steps.trivy_scan.outputs.exitcode != '0' && steps.docker_push.conclusion == 'success'
        run: |
          gh issue create \
            --repo ${{ github.repository }} \
            --title ":skull: [vuln] Vulnerability in image ${{ env.GH_REPO_NAME }}:latest" \
            --body-file '/tmp/vuln_info.md' \
            --assignee "${{ env.GH_REPO_OWNER }}" \
            --label bug
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack notification - Vulnerability
        if: steps.trivy_scan.outputs.exitcode != '0' && steps.docker_push.conclusion == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#e82c2c'
          SLACK_TITLE: ':skull: Vulnerability detected & issue created'
          SLACK_MESSAGE: 'See GitHub issues: https://github.com/${{ env.GH_REPO_OWNER }}/${{ env.GH_REPO_NAME }}/issues'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Slack notification - Docker pushed
        if: steps.docker_push.conclusion == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#2c74e8'
          SLACK_TITLE: ":img_docker: Docker image built and pushed"
          SLACK_MESSAGE: "Images: ${{ github.repository_owner }}/${{ env.GH_REPO_NAME }}:${{ steps.get_version.outputs.version }}"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
